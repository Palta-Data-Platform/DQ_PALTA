simple_data.dm_finance.f_subscription:
  schedule: '0 5 * * *'
  custom_selects:
    All_amounts = 0:
      name: "All amounts in original currency have been converted to USD. transactions were not converted to USD last 7 days"
      All_amounts query: "
        SELECT
  COUNT(*) AS res_test
FROM simple.finance.f_subscription
WHERE 
  DATE(TRANSACTION_TS) > DATEADD(DAY, -7, CURRENT_DATE()) AND
  AMOUNT_USD = 0 AND
  ROUND(AMOUNT_PAID, 0) != 0"
    No_duplicated = 0:
      name: "No duplicated transactions last 10 days.There were {res_test} duplicated transactions in the table"
      No_duplicated query: "SELECT
   COUNT(TRANSACTION_ID) - COUNT(DISTINCT TRANSACTION_ID) as res_test
FROM simple.finance.f_subscription
WHERE DATE(TRANSACTION_TS) > DATEADD(DAY, -10, CURRENT_DATE())"
    Data_for_all_providers_came = 0:
      name: "Data for all providers came yesterday. Not all providers has come (only {res_test} providers, expected more)"
      Data_for_all_providers_came query: "SELECT
  IFF(
    YESTERDAY.COUNT_PROVIDERS < TOTAL.COUNT_PROVIDERS,
    1,
    0
  ) AS IS_PASSED
FROM (
  SELECT COUNT(DISTINCT PROVIDER_NAME) AS COUNT_PROVIDERS
  FROM simple.finance.f_subscription
  WHERE DATE(TRANSACTION_TS) = DATEADD(DAY, -1, CURRENT_DATE())
) AS YESTERDAY
CROSS JOIN (
  SELECT COUNT(DISTINCT PROVIDER_NAME) AS COUNT_PROVIDERS
  FROM simple.finance.f_subscription
  WHERE DATE(TRANSACTION_TS) = DATEADD(DAY, -7, CURRENT_DATE())
) AS TOTAL"
    Transactions_count_change < 0.5:
      name: "Transactions count change is less than 50% comparing to previous day. There were 50% more or less transactions yesterday than the day before ({res_test} difference)"
      Transactions_count_change query: "SELECT
  ABS(
      1 -
      DIV0(
        COUNT_TRANSACTIONS, 
        LAG(COUNT_TRANSACTIONS, -1) OVER(ORDER BY TRANSACTION_DATE DESC)
      )
    ) AS res_test
  
FROM (
  SELECT
    DATE(TRANSACTION_TS) AS TRANSACTION_DATE,
    COUNT(DISTINCT TRANSACTION_ID) AS COUNT_TRANSACTIONS
  FROM simple.finance.f_subscription
  WHERE 
    DATE(TRANSACTION_TS) BETWEEN DATEADD(DAY, -2, CURRENT_DATE()) AND DATEADD(DAY, -1, CURRENT_DATE())
  GROUP BY 1 
  ORDER BY 1 DESC
)
LIMIT 1"
simple_data.dm_dashboard.f_user_activity:
  schedule: "0 5 * * *"
  ALWAYS_SEND: 'False'
  freshness_date > 0:
    time_colum: 'REPORT_DT'
    interval: '48h'
  custom_selects:
    the_number_of_installation = 0:
      name: "The number of installation is greater than the number of total actions. Need to check the data.diff={res_test:.2f}%.."
      the_number_of_installation query: "select case when sum(ACTIVE_USERS)<sum(INSTALLS) then 1 else 0 end as res   from simple_data.dm_dashboard.f_user_activity where REPORT_DT >= current_timestamp - INTERVAL '72h'"
simple_data.dm_finance.f_transaction:
  schedule: "0 5 * * *"
  freshness_date > 0:
    time_colum: 'TRANSACTION_TS'
    interval: '24h'
simple_data.stg_finance.f_revenuecat_event:
  schedule: "0 * * * *"
  freshness_date > 0:
    time_colum: 'EVENT_TIMESTAMP'
    interval: '60m'
  dublicate = 0:
    schedule: "0 */3 * * *"
    time_colum: 'EVENT_TIMESTAMP'
    interval: '180m'
    unics_colums: 'ID'
  Checking_for_missing_days_for_days = 0:
    schedule: "0 5 * * *"
    time_colum: 'EVENT_TIMESTAMP'
    num_days: '3'
simple_data.stg_finance.f_revenuecat_subscription:
  schedule: "0 */8 * * *"
  freshness_date > 0:
    time_colum: 'T_SF_LOAD_TS'
    interval: '26h'
  dublicate = 0:
    schedule: "0 5 * * *"
    time_colum: 'T_SF_LOAD_TS'
    interval: '3d'
    unics_colums: "STORE_TRANSACTION_ID,START_TIME"
paced_data.stg_telemetry.f_user_event:
    schedule: "0 0 * * *"
    freshness_date > 0:
      time_colum: 'SERVER_UPLOAD_TIME'
      interval: '24h'
    dublicate = 0:
      schedule: "0 */3 * * *"
      time_colum: 'SERVER_UPLOAD_TIME'
      interval: '72h'
      unics_colums: 'UUID'
simple_data.stg_finance.f_source_refund:
  schedule: "0 0 * * *"
  freshness_date > 0:
    time_colum: 'T_SF_LOAD_TS'
    interval: '48h'
simple_data.stg_telemetry.d_user_profile:
  schedule: "0 0 * * *"
  freshness_date > 0:
    time_colum: 'T_CHANGE_TS'
    interval: '28h'
simple_data.stg_telemetry.f_amplitude_event:
  schedule: "0 0 * * *"
  freshness_date > 0:
    time_colum: 'T_CHANGE_TS'
    interval: '24h'
  dublicate = 0:
    schedule: "0 */3 * * *"
    time_colum: 'T_CHANGE_TS'
    interval: '72h'
    unics_colums: 'UUID'
simple_data.stg_telemetry.f_user_event:
  schedule: "0 * * * *"
  Errors_in_loading_history = 0:
    interval: '60m'
  freshness_date > 0:
    time_colum: 'SERVER_UPLOAD_TIME'
    interval: '60m'
  dublicate = 0:
    schedule: "0 */3 * * *"
    time_colum: 'SERVER_UPLOAD_TIME'
    interval: '72h'
    unics_colums: 'UUID'
  custom_selects:
    No_Web = 0:
      name: "There is no Web in event for the last hour.Event Analytics is partially unavailable"
      No_Web query: "SELECT case when count(1)>0 then 0 else 1 end as res from simple_data.stg_telemetry.f_user_event where SERVER_UPLOAD_TIME>current_timestamp -INTERVAL '1h' and PLATFORM='Web'  LIMIT 50\n"
    No_Android = 0:
      name: "There is no Android in event for the last hour.Event Analytics is partially unavailable"
      No_Android query: "SELECT case when count(1)>0 then 0 else 1 end as res from simple_data.stg_telemetry.f_user_event where SERVER_UPLOAD_TIME>current_timestamp -INTERVAL '1h' and PLATFORM='Android'  LIMIT 50\n"
    for_missing_days_for_3_days = 0:
      schedule: "0 5 * * *"
      name: "There are missed days. {res_test}. Loading this table"
      for_missing_days_for_3_days query:  "select case when (count(1)<3 or median(ct)/min(ct)>=2)then 1 else 0 end from (select DATE_TRUNC('day',EVENT_TIME),count(1) as ct from simple_data.stg_telemetry.f_user_event where DATE_TRUNC('day',EVENT_TIME)>=CURRENT_DATE()-INTERVAL '3d' and DATE_TRUNC('day',EVENT_TIME)<CURRENT_DATE() group by 1)"
    No_IOS= 0:
      schedule: "0 5 * * *"
      name: "There is no iOS in event for the last hour.Event Analytics is partially unavailable"
      No_Android query: "SELECT case when count(1)>0 then 0 else 1 end as res from simple_data.stg_telemetry.f_user_event where SERVER_UPLOAD_TIME>current_timestamp -INTERVAL '1h' and PLATFORM='iOS'  LIMIT 50\n"
simple_data.stg_telemetry.idmap_user:
  schedule: "0 0 * * *"
  freshness_date > 0:
    time_colum: 'T_CHANGE_TS'
    interval: '26h'
  dublicate = 0:
    schedule: "0 */3 * * *"
    time_colum: 'T_CHANGE_TS'
    interval: '72h'
    unics_colums: "USER_ID,PALTABRAIN_ID"
simple_data.wrk_stg_finance.f_revenuecat_event:
  schedule: "0 * * * *"
  Errors_in_loading_history = 0:
    interval: '60m'
simple_data.wrk_stg_finance.f_revenuecat_subscription:
  schedule: "0 */8 * * *"
  Errors_in_loading_history = 0:
    interval: '24h'
  freshness_date > 0:
    time_colum: 'T_SF_LOAD_TS'
    interval: '26h'
  custom_selects:
    app_store = 0:
      name: "There is no app_store in subscriptions for the last 26 hours.Payment Analytics is partially unavailable"
      app_store query: "SELECT case when count(1)>0 then 0 else 1 end as res from simple_data.wrk_stg_finance.f_revenuecat_subscription where T_SF_LOAD_TS>current_timestamp -INTERVAL '26h' and STORE='app_store' LIMIT 50"
simple_data.wrk_stg_telemetry.idmap_user:
  schedule: "0 */8 * * *"
  Errors_in_loading_history = 0:
    interval: '24h'
weather_data.stg_telemetry.f_user_event:
  schedule: "0 */3 * * *"
  Errors_in_loading_history = 0:
    interval: '3h'
  dublicate = 0:
    schedule: "0 0 * * *"
    time_colum: 'SERVER_UPLOAD_TIME'
    interval: '72h'
    unics_colums: "UUID"
  freshness_date > 0:
    time_colum: 'SERVER_UPLOAD_TIME'
    interval: '3h'
zing_data.dm_dashboard.f_user_activity:
  schedule: "0 */8 * * *"
  Errors_in_loading_history = 0:
    interval: '3h'
  dublicate = 0:
    schedule: "0 0 * * *"
    time_colum: 'REPORT_DT'
    interval: '72h'
    unics_colums: "PERIOD,REPORT_DT,PLATFORM,COUNTRY,FIRST_EVENT_DT"
  freshness_date > 0:
    time_colum: 'REPORT_DT'
    interval: '48h'
zing_data.dm_finance.f_transaction:
  schedule: "0 */8 * * *"
  Errors_in_loading_history = 0:
    interval: '3h'
  dublicate = 0:
    schedule: "0 0 * * *"
    time_colum: 'TRANSACTION_TS'
    interval: '72h'
    unics_colums: "TRANSACTION_ID,TRANSACTION_TYPE"
  freshness_date > 0:
    time_colum: 'TRANSACTION_TS'
    interval: '24h'
zing_data.stg_finance.f_revenuecat_event:
  schedule: "0 */3 * * *"
  dublicate = 0:
    schedule: "0 0 * * *"
    time_colum: 'EVENT_TIMESTAMP'
    interval: '72h'
    unics_colums: "ID"
  freshness_date > 0:
    time_colum: 'EVENT_TIMESTAMP'
    interval: '180m'
zing_data.stg_finance.f_revenuecat_subscription:
  schedule: "0 */3 * * *"

  dublicate = 0:
    schedule: "0 0 * * *"
    time_colum: 'T_SF_LOAD_TS'
    interval: '72h'
    unics_colums: "STORE_TRANSACTION_ID,START_TIME"
  freshness_date > 0:
    time_colum: 'T_SF_LOAD_TS'
    interval: '26h'
zing_data.stg_telemetry.d_user_profile:
  schedule: "0 */3 * * *"
  freshness_date > 0:
    time_colum: 'T_CHANGE_TS'
    interval: '26h'
zing_data.stg_telemetry.f_user_event:
  schedule: "0 * * * *"
  Errors_in_loading_history = 0:
    interval: '60m'
  freshness_date > 0:
    time_colum: 'SERVER_UPLOAD_TIME'
    interval: '60m'
  dublicate = 0:
    schedule: "0 */3 * * *"
    time_colum: 'SERVER_UPLOAD_TIME'
    interval: '72h'
    unics_colums: 'UUID'
  custom_selects:
    for_missing_days_for_3_days = 0:
      schedule: "0 5 * * *"
      name: "There are missed days. {res_test}. Loading this table"
      for_missing_days_for_3_days query: "select case when (count(1)<3 or median(ct)/min(ct)>=2)then 1 else 0 end from (select DATE_TRUNC('day',EVENT_TIME),count(1) as ct from zing_data.stg_telemetry.f_user_event where DATE_TRUNC('day',EVENT_TIME)>=CURRENT_DATE()-INTERVAL '3d' and DATE_TRUNC('day',EVENT_TIME)<CURRENT_DATE() group by 1)"
zing_data.stg_telemetry.idmap_user:
  schedule: "0 */4 * * *"
  freshness_date > 0:
    time_colum: 'T_CHANGE_TS'
    interval: '26h'
zing_data.wrk_stg_finance.f_revenuecat_event:
  schedule: "0 * * * *"
  Errors_in_loading_history = 0:
    interval: '60m'
zing_data.wrk_stg_telemetry.d_user_profile:
  schedule: "0 */4 * * *"
  Errors_in_loading_history = 0:
    interval: '24h'
zing_data.wrk_stg_telemetry.idmap_user:
  schedule: "0 */4 * * *"
  Errors_in_loading_history = 0:
    interval: '24h'





